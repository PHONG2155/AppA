name: Build Android APK

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROIDAPI: "34"
      ANDROIDMINAPI: "21"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            unzip \
            git \
            curl \
            openjdk-17-jdk \
            libffi-dev \
            libssl-dev \
            zlib1g-dev

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install buildozer==1.5.0 cython==0.29.* virtualenv

      - name: Prepare Android SDK / NDK
        run: |
          set -e

          # Create SDK dir in workspace
          mkdir -p "$GITHUB_WORKSPACE/.android-sdk"
          export ANDROID_SDK_ROOT="$GITHUB_WORKSPACE/.android-sdk"
          export ANDROID_HOME="$ANDROID_SDK_ROOT"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"

          # Download commandline tools (sdkmanager)
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip
          rm cmdtools.zip
          mv cmdline-tools latest

          yes | sdkmanager --licenses >/dev/null 2>&1 || true
          sdkmanager "platform-tools" "platforms;android-${ANDROIDAPI}" "build-tools;36.1.0" "ndk;27.0.12077973"

          # Persist env for later steps
          {
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_HOME=$ANDROID_HOME"
            echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          } >> "$GITHUB_ENV"

      - name: Build APK (debug)
        shell: bash
        run: |
          set -e

          echo "== ENV check =="
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "PATH=$PATH"
          java -version
          python --version
          buildozer --version || true

          # --- 0. trick buildozer so it finds SDK in ~/.buildozer ---
          mkdir -p "$HOME/.buildozer/android/platform"
          if [ ! -d "$HOME/.buildozer/android/platform/android-sdk" ]; then
            ln -s "$ANDROID_SDK_ROOT" "$HOME/.buildozer/android/platform/android-sdk"
          fi

          mkdir -p "$HOME/.buildozer/android/platform/android-sdk/tools/bin"
          ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "$HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager" || true
          ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" "$HOME/.buildozer/android/platform/android-sdk/tools/bin/avdmanager" || true

          # --- 1. clone python-for-android and patch libffi recipe ---
          P4A_DIR="$HOME/p4a-custom"
          rm -rf "$P4A_DIR"
          git clone --depth 1 https://github.com/kivy/python-for-android.git "$P4A_DIR"

          TARGET_FILE="$P4A_DIR/pythonforandroid/recipes/libffi/__init__.py"
          rm -f "$TARGET_FILE"
          cat > "$TARGET_FILE" << 'EOF'
from pythonforandroid.recipe import AutoconfRecipe
import sh
from pythonforandroid.logger import shprint

class LibffiRecipe(AutoconfRecipe):
  version = "3.4.4"
  url = "https://github.com/libffi/libffi/releases/download/v{version}/libffi-{version}.tar.gz"
  built_libraries = {"libffi.so": "inst/lib"}

  def should_build(self, arch):
    return True

  def build_arch(self, arch):
    env = self.get_build_env(arch)
    build_dir = self.get_build_dir(arch.arch)
    install_dir = self.get_install_dir(arch)

    self.apply_patches(arch)

    with self.chdir(build_dir):
      host = arch.command_prefix
      shprint(
        sh.Command("./configure"),
        f"--host={host}",
        "--enable-static",
        "--disable-docs",
        "--disable-dependency-tracking",
        f"--prefix={install_dir}",
        _env=env
      )
      shprint(sh.make, "-j4", _env=env)
      shprint(sh.make, "install", _env=env)

recipe = LibffiRecipe()
EOF

          ABS_P4A_DIR="$P4A_DIR"
          ABS_RECIPES_DIR="$P4A_DIR/pythonforandroid/recipes"

          # --- 2. ensure buildozer.spec has required keys ---
          grep -q "^title =" buildozer.spec           || echo "title = LoginDemo" >> buildozer.spec
          grep -q "^package.name =" buildozer.spec    || echo "package.name = logindemo" >> buildozer.spec
          grep -q "^package.domain =" buildozer.spec  || echo "package.domain = org.example" >> buildozer.spec
          grep -q "^version =" buildozer.spec         || echo "version = 0.1" >> buildozer.spec
          grep -q "^requirements =" buildozer.spec    || echo "requirements = python3,kivy==2.3.0" >> buildozer.spec
          grep -q "^android.api =" buildozer.spec     || echo "android.api = ${ANDROIDAPI}" >> buildozer.spec
          grep -q "^android.minapi =" buildozer.spec  || echo "android.minapi = ${ANDROIDMINAPI}" >> buildozer.spec
          grep -q "^android.archs =" buildozer.spec   || echo "android.archs = arm64-v8a" >> buildozer.spec
          grep -q "^android.accept_sdk_license" buildozer.spec || echo "android.accept_sdk_license = True" >> buildozer.spec

          sed -i '/^p4a\.source_dir/d' buildozer.spec
          sed -i '/^p4a\.local_recipes/d' buildozer.spec
          sed -i '/^p4a\.branch/d' buildozer.spec

          echo "p4a.source_dir = ${ABS_P4A_DIR}" >> buildozer.spec
          echo "p4a.local_recipes = ${ABS_RECIPES_DIR}" >> buildozer.spec
          echo "p4a.branch = master" >> buildozer.spec

          echo "===== FINAL buildozer.spec ====="
          cat buildozer.spec
          echo "================================"

          # --- 3. clean old libffi build dirs (defensive) ---
          rm -rf .buildozer/android/platform/build-*/build/other_builds/libffi || true
          rm -rf $HOME/.buildozer/android/platform/build-*/build/other_builds/libffi || true

          # --- 4. build apk ---
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH="$JAVA_HOME/bin:$PATH"
          buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: bin/*.apk
