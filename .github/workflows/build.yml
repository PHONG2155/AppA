name: Build Android APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
      ANDROID_HOME: ${{ github.workspace }}/.android-sdk
      PATH: ${{ github.workspace }}/.android-sdk/cmdline-tools/latest/bin:${{ github.workspace }}/.android-sdk/platform-tools:/usr/local/bin:/usr/bin:/bin
      ANDROIDAPI: "34"
      ANDROIDMINAPI: "21"

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            git \
            zip \
            unzip \
            wget \
            tar \
            openjdk-17-jdk \
            python3-setuptools \
            python3-venv \
            libffi-dev \
            libssl-dev \
            liblzma-dev \
            zlib1g-dev \
            libjpeg-dev \
            libfreetype6-dev \
            cmake \
            autoconf \
            automake \
            libtool \
            pkg-config

      - name: Install buildozer
        run: |
          pip install --upgrade pip
          pip install buildozer Cython

      - name: Prepare Android SDK
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip
          rm cmdtools.zip
          mv cmdline-tools latest

      - name: Accept Android SDK Licenses
        run: |
          yes | "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses || true
          "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-${ANDROIDAPI}" \
            "build-tools;34.0.0"
          yes | "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses

      - name: Build APK (debug)
        shell: bash
        run: |
          # 1. Chuẩn bị SDK cho Buildozer
          mkdir -p $HOME/.buildozer/android/platform
          if [ ! -d $HOME/.buildozer/android/platform/android-sdk ]; then
            ln -s "$ANDROID_SDK_ROOT" $HOME/.buildozer/android/platform/android-sdk
          fi

          mkdir -p $HOME/.buildozer/android/platform/android-sdk/tools/bin
          ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager || true
          ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" $HOME/.buildozer/android/platform/android-sdk/tools/bin/avdmanager || true

          # 2. Đảm bảo buildozer.spec có config cần thiết
          grep -q "android.accept_sdk_license" buildozer.spec || echo "android.accept_sdk_license = True" >> buildozer.spec
          grep -q "android.archs" buildozer.spec || echo "android.archs = arm64-v8a" >> buildozer.spec

          # 3. Clone python-for-android master sạch
          P4A_DIR="$HOME/.buildozer/android/platform/python-for-android"
          rm -rf "$P4A_DIR"
          git clone --depth 1 https://github.com/kivy/python-for-android.git "$P4A_DIR"

          # 4. Patch libffi recipe để tránh autoreconf/autogen.sh lỗi
          TARGET_FILE="$P4A_DIR/pythonforandroid/recipes/libffi/__init__.py"
          rm -f "$TARGET_FILE"
          printf "%s\n" "from pythonforandroid.recipe import AutoconfRecipe" >> "$TARGET_FILE"
          printf "%s\n" "import sh" >> "$TARGET_FILE"
          printf "%s\n" "from pythonforandroid.logger import shprint" >> "$TARGET_FILE"
          printf "%s\n" "" >> "$TARGET_FILE"
          printf "%s\n" "class LibffiRecipe(AutoconfRecipe):" >> "$TARGET_FILE"
          printf "%s\n" "    version = \"3.4.4\"" >> "$TARGET_FILE"
          printf "%s\n" "    url = \"https://github.com/libffi/libffi/releases/download/v{version}/libffi-{version}.tar.gz\"" >> "$TARGET_FILE"
          printf "%s\n" "    built_libraries = {\"libffi.so\": \"inst/lib\"}" >> "$TARGET_FILE"
          printf "%s\n" "" >> "$TARGET_FILE"
          printf "%s\n" "    def should_build(self, arch):" >> "$TARGET_FILE"
          printf "%s\n" "        return True" >> "$TARGET_FILE"
          printf "%s\n" "" >> "$TARGET_FILE"
          printf "%s\n" "    def build_arch(self, arch):" >> "$TARGET_FILE"
          printf "%s\n" "        env = self.get_build_env(arch)" >> "$TARGET_FILE"
          printf "%s\n" "        build_dir = self.get_build_dir(arch.arch)" >> "$TARGET_FILE"
          printf "%s\n" "        install_dir = self.get_install_dir(arch)" >> "$TARGET_FILE"
          printf "%s\n" "" >> "$TARGET_FILE"
          printf "%s\n" "        self.apply_patches(arch)" >> "$TARGET_FILE"
          printf "%s\n" "" >> "$TARGET_FILE"
          printf "%s\n" "        with self.chdir(build_dir):" >> "$TARGET_FILE"
          printf "%s\n" "            host = arch.command_prefix" >> "$TARGET_FILE"
          printf "%s\n" "            shprint(" >> "$TARGET_FILE"
          printf "%s\n" "                sh.Command(\"./configure\")," >> "$TARGET_FILE"
          printf "%s\n" "                f\"--host={host}\"," >> "$TARGET_FILE"
          printf "%s\n" "                \"--enable-static\"," >> "$TARGET_FILE"
          printf "%s\n" "                \"--disable-docs\"," >> "$TARGET_FILE"
          printf "%s\n" "                \"--disable-dependency-tracking\"," >> "$TARGET_FILE"
          printf "%s\n" "                f\"--prefix={install_dir}\"," >> "$TARGET_FILE"
          printf "%s\n" "                _env=env" >> "$TARGET_FILE"
          printf "%s\n" "            )" >> "$TARGET_FILE"
          printf "%s\n" "            shprint(sh.make, \"-j4\", _env=env)" >> "$TARGET_FILE"
          printf "%s\n" "            shprint(sh.make, \"install\", _env=env)" >> "$TARGET_FILE"
          printf "%s\n" "" >> "$TARGET_FILE"
          printf "%s\n" "recipe = LibffiRecipe()" >> "$TARGET_FILE"

          # 5. Build APK
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH
          cd "$GITHUB_WORKSPACE"
          buildozer android debug

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: bin/*.apk
