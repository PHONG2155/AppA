name: Build Android APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
      ANDROID_HOME: ${{ github.workspace }}/.android-sdk
      PATH: ${{ github.workspace }}/.android-sdk/cmdline-tools/latest/bin:${{ github.workspace }}/.android-sdk/platform-tools:/usr/local/bin:/usr/bin:/bin
      ANDROIDAPI: "34"
      ANDROIDMINAPI: "21"

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            git \
            zip \
            unzip \
            wget \
            tar \
            openjdk-17-jdk \
            python3-setuptools \
            python3-venv \
            libffi-dev \
            libssl-dev \
            liblzma-dev \
            zlib1g-dev \
            libjpeg-dev \
            libfreetype6-dev \
            cmake \
            autoconf \
            automake \
            libtool \
            pkg-config

      - name: Install buildozer
        run: |
            pip install --upgrade pip
            pip install buildozer Cython

      - name: Prepare Android SDK / sdkmanager
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"

          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip
          rm cmdtools.zip

          mv cmdline-tools latest

          test -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"

      - name: Accept Android SDK licenses and install platforms/build-tools
        run: |
          yes | "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses || true

          "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-${ANDROIDAPI}" \
            "build-tools;34.0.0"

          yes | "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses

      - name: Build APK (debug)
        run: |
          # 1. Chuẩn SDK cho buildozer
          mkdir -p $HOME/.buildozer/android/platform
          if [ ! -d $HOME/.buildozer/android/platform/android-sdk ]; then
            ln -s "$ANDROID_SDK_ROOT" $HOME/.buildozer/android/platform/android-sdk
          fi

          mkdir -p $HOME/.buildozer/android/platform/android-sdk/tools/bin
          if [ -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
              $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
          fi
          if [ -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" ]; then
            ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" \
              $HOME/.buildozer/android/platform/android-sdk/tools/bin/avdmanager
          fi

          # 2. Đảm bảo spec có accept license + arch arm64 only
          if ! grep -q "android.accept_sdk_license" buildozer.spec; then
            echo "android.accept_sdk_license = True" >> buildozer.spec
          fi
          if ! grep -q "android.archs" buildozer.spec; then
            echo "android.archs = arm64-v8a" >> buildozer.spec
          fi

          # 3. Force python-for-android master
          P4A_DIR="$HOME/.buildozer/android/platform/python-for-android"
          rm -rf "$P4A_DIR"
          git clone --depth 1 https://github.com/kivy/python-for-android.git "$P4A_DIR"
          cd "$P4A_DIR"

          # 4. PATCH libffi recipe để bỏ autoreconf/autogen.sh lỗi
          cat > pythonforandroid/recipes/libffi/__init__.py << 'EOF'
from pythonforandroid.recipe import AutoconfRecipe
import sh
from pythonforandroid.logger import shprint
import os


class LibffiRecipe(AutoconfRecipe):
    """
    Patched libffi recipe:
    - Use official release tarball (already has configure)
    - Skip autoreconf/autogen.sh that breaks with Ubuntu 24 autoconf
    """
    version = "3.4.4"
    url = "https://github.com/libffi/libffi/releases/download/v{version}/libffi-{version}.tar.gz"
    built_libraries = {"libffi.so": "inst/lib"}

    def should_build(self, arch):
        return True

    def build_arch(self, arch):
        env = self.get_build_env(arch)

        build_dir = self.get_build_dir(arch.arch)
        install_dir = self.get_install_dir(arch)

        self.apply_patches(arch)

        with self.chdir(build_dir):
            host = arch.command_prefix
            shprint(
                sh.Command("./configure"),
                f"--host={host}",
                "--enable-static",
                "--disable-docs",
                "--disable-dependency-tracking",
                f"--prefix={install_dir}",
                _env=env
            )
            shprint(sh.make, "-j4", _env=env)
            shprint(sh.make, "install", _env=env)


recipe = LibffiRecipe()
EOF

          # 5. Xuất JAVA_HOME cho Gradle
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH

          # 6. Build APK
          cd "$GITHUB_WORKSPACE"
          buildozer android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: bin/*.apk
