      - name: Build APK (debug)
        run: |
          # 1. Chuẩn SDK cho buildozer
          mkdir -p $HOME/.buildozer/android/platform
          if [ ! -d $HOME/.buildozer/android/platform/android-sdk ]; then
            ln -s "$ANDROID_SDK_ROOT" $HOME/.buildozer/android/platform/android-sdk
          fi

          mkdir -p $HOME/.buildozer/android/platform/android-sdk/tools/bin
          if [ -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
              $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
          fi
          if [ -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" ]; then
            ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" \
              $HOME/.buildozer/android/platform/android-sdk/tools/bin/avdmanager
          fi

          # 2. Đảm bảo spec có license + arch
          if ! grep -q "android.accept_sdk_license" buildozer.spec; then
            echo "android.accept_sdk_license = True" >> buildozer.spec
          fi
          if ! grep -q "android.archs" buildozer.spec; then
            echo "android.archs = arm64-v8a" >> buildozer.spec
          fi

          # 3. Force python-for-android master
          P4A_DIR="$HOME/.buildozer/android/platform/python-for-android"
          rm -rf "$P4A_DIR"
          git clone --depth 1 https://github.com/kivy/python-for-android.git "$P4A_DIR"
          cd "$P4A_DIR"

          # 4. PATCH libffi recipe để tránh autoreconf/autogen.sh
          cat > pythonforandroid/recipes/libffi/__init__.py << 'EOF'
from pythonforandroid.recipe import AutoconfRecipe
import sh
from pythonforandroid.logger import shprint
import os


class LibffiRecipe(AutoconfRecipe):
    """
    Patched libffi recipe:
    - use official release tarball (already has configure)
    - skip autoreconf / autogen.sh that breaks on Ubuntu 24 autoconf
    """
    version = "3.4.4"
    url = "https://github.com/libffi/libffi/releases/download/v{version}/libffi-{version}.tar.gz"
    built_libraries = {"libffi.so": "inst/lib"}
    # tell p4a where .so ends up after install

    def should_build(self, arch):
        return True

    def build_arch(self, arch):
        env = self.get_build_env(arch)

        # classic ./configure && make && make install
        build_dir = self.get_build_dir(arch.arch)
        install_dir = self.get_install_dir(arch)

        # ensure fresh
        self.apply_patches(arch)

        # configure
        with self.chdir(build_dir):
            host = arch.command_prefix
            shprint(
                sh.Command("./configure"),
                f"--host={host}",
                "--enable-static",
                "--disable-docs",
                "--disable-dependency-tracking",
                f"--prefix={install_dir}",
                _env=env
            )
            # build
            shprint(sh.make, "-j4", _env=env)
            # install to our staged dir
            shprint(sh.make, "install", _env=env)

        # done (AutoconfRecipe parent doesn't run again, so ok)

recipe = LibffiRecipe()
EOF

          # 5. Xuất JAVA_HOME cho Gradle
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH

          # 6. Quay lại root project và build
          cd "$GITHUB_WORKSPACE"
          buildozer android debug
